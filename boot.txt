# AOI Vision Flow Boot Script
# Complete startup sequence with cache clearing for PCB Defect Detection System
# Run these commands line by line in PowerShell

# Step 1: Stop any existing processes
Write-Host "üõë Stopping existing processes..." -ForegroundColor Yellow
taskkill /F /IM python.exe 2>$null
taskkill /F /IM node.exe 2>$null

# Step 2: Navigate to project directory
Write-Host "üìÅ Navigating to project directory..." -ForegroundColor Cyan
cd "C:\Project\PCB"

# Step 3: Clear backend cache directories
Write-Host "üßπ Clearing backend cache..." -ForegroundColor Magenta
if (Test-Path "uploads") { Remove-Item "uploads\*" -Force -Recurse ; Write-Host "‚úÖ Cleared uploads folder" } else { Write-Host "‚ÑπÔ∏è No uploads folder found" }
if (Test-Path "annotated") { Remove-Item "annotated\*" -Force -Recurse ; Write-Host "‚úÖ Cleared annotated folder" } else { Write-Host "‚ÑπÔ∏è No annotated folder found" }
if (Test-Path "results") { Remove-Item "results\*" -Force -Recurse ; Write-Host "‚úÖ Cleared results folder" } else { Write-Host "‚ÑπÔ∏è No results folder found" }
if (Test-Path "temp") { Remove-Item "temp\*" -Force -Recurse ; Write-Host "‚úÖ Cleared temp folder" } else { Write-Host "‚ÑπÔ∏è No temp folder found" }

# Step 4: Clear frontend cache
Write-Host "üßπ Clearing frontend cache..." -ForegroundColor Magenta
cd "C:\Project\PCB\aoi-vision-flow"
if (Test-Path "dist") { Remove-Item "dist" -Force -Recurse ; Write-Host "‚úÖ Cleared dist folder" } else { Write-Host "‚ÑπÔ∏è No dist folder found" }
if (Test-Path "node_modules\.vite") { Remove-Item "node_modules\.vite" -Force -Recurse ; Write-Host "‚úÖ Cleared Vite cache" } else { Write-Host "‚ÑπÔ∏è No Vite cache found" }

# Step 5: Start backend server (YOLOv10 AOI)
Write-Host "üöÄ Starting backend server..." -ForegroundColor Green
cd "C:\Project\PCB"
Start-Process powershell -ArgumentList "-Command", "C:/Project/PCB/.venv/Scripts/python.exe aoi_backend_server.py"

# Step 6: Wait for backend to initialize
Write-Host "‚è≥ Waiting for backend to initialize..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Step 7: Start frontend server (React/Vite)
Write-Host "üåê Starting frontend server..." -ForegroundColor Green
cd "C:\Project\PCB\aoi-vision-flow"
Start-Process powershell -ArgumentList "-Command", "npm run dev"

# Step 8: Wait for frontend to initialize
Write-Host "‚è≥ Waiting for frontend to initialize..." -ForegroundColor Yellow
Start-Sleep -Seconds 3

# Step 9: Display system status
Write-Host "‚úÖ AOI Vision Flow System Started!" -ForegroundColor Green
Write-Host "üìä Backend API: http://localhost:5000" -ForegroundColor Cyan
Write-Host "üñ•Ô∏è  Frontend UI: http://localhost:8080" -ForegroundColor Cyan
Write-Host ""
Write-Host "üéØ System Features:" -ForegroundColor White
Write-Host "   ‚Ä¢ Direct YOLOv10 model inference (no confidence scoring)" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Binary classification: PASS/FAIL based on defect detection" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Real-time counters with live updates" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Defect analysis modal with bounding box visualization" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Comprehensive cleanup system" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Industrial conveyor belt animations" -ForegroundColor Gray
Write-Host ""
Write-Host "üìã Usage Instructions:" -ForegroundColor White
Write-Host "   1. Open http://localhost:8080 in your browser" -ForegroundColor Gray
Write-Host "   2. Upload PCB images for inspection" -ForegroundColor Gray
Write-Host "   3. View results with detailed defect analysis" -ForegroundColor Gray
Write-Host "   4. Monitor live counters for Pass/Fail statistics" -ForegroundColor Gray

# Alternative: Single line commands for quick restart
Write-Host ""
Write-Host "üîÑ Quick Restart Commands:" -ForegroundColor Yellow
Write-Host "Backend Only: cd 'C:\Project\PCB' ; C:/Project/PCB/.venv/Scripts/python.exe aoi_backend_server.py" -ForegroundColor Gray
Write-Host "Frontend Only: cd 'C:\Project\PCB\aoi-vision-flow' ; npm run dev" -ForegroundColor Gray